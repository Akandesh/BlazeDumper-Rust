#pragma once
#include <cstdint>

namespace blazedumper {
    constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x3C72A08;
    constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x3C46850;
    constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x3C5EE10;
    constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode_TypeInfo = 0x3CA1D98;
    constexpr ::std::ptrdiff_t ConVar_Admin_TypeInfo = 0x3C679C0;
    constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x3C72C78;
    constexpr ::std::ptrdiff_t TOD_Sky_TypeInfo = 0x3C313E8;
    constexpr ::std::ptrdiff_t ConsoleSystem_Index_TypeInfo = 0x3C72C38;
    constexpr ::std::ptrdiff_t BasePlayer_TypeInfo = 0x3C73A48;
    constexpr ::std::ptrdiff_t ConVar_Graphics_TypeInfo = 0x3C286B0;
    constexpr ::std::ptrdiff_t OcclusionCulling_TypeInfo = 0x3C73D00;
    constexpr ::std::ptrdiff_t BaseNetworkable_TypeInfo = 0x3C73638;
    namespace BasePlayer {
        constexpr ::std::ptrdiff_t __menuOption_Climb = 0x290; // Option
        constexpr ::std::ptrdiff_t __menuOption_Drink = 0x308; // Option
        constexpr ::std::ptrdiff_t __menuOption_InviteToClan = 0x380; // Option
        constexpr ::std::ptrdiff_t __menuOption_InviteToTeam = 0x3F8; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_AssistPlayer = 0x470; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_ForceMountHood = 0x4E8; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_ForceSwapSeat = 0x560; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_LootPlayer = 0x5D8; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_Push = 0x650; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_RemoveCuffs = 0x6C8; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_RemoveHood = 0x740; // Option
        constexpr ::std::ptrdiff_t __menuOption_SaltWater = 0x7B8; // Option
        constexpr ::std::ptrdiff_t clanId = 0x830; // long
        constexpr ::std::ptrdiff_t playerModel = 0x838; // PlayerModel
        constexpr ::std::ptrdiff_t Frozen = 0x840; // bool
        constexpr ::std::ptrdiff_t LookLocked = 0x841; // bool
        constexpr ::std::ptrdiff_t voiceRecorder = 0x848; // PlayerVoiceRecorder
        constexpr ::std::ptrdiff_t voiceSpeaker = 0x850; // PlayerVoiceSpeaker
        constexpr ::std::ptrdiff_t input = 0x858; // PlayerInput
        constexpr ::std::ptrdiff_t movement = 0x860; // BaseMovement
        constexpr ::std::ptrdiff_t collision = 0x868; // BaseCollision
        constexpr ::std::ptrdiff_t bagCount = 0x870; // int
        constexpr ::std::ptrdiff_t shelterCount = 0x874; // int
        constexpr ::std::ptrdiff_t modelInitUnderwear = 0x878; // uint
        constexpr ::std::ptrdiff_t _lookingAt = 0x880; // GameObject
        constexpr ::std::ptrdiff_t _lookingAtEntity = 0x888; // BaseEntity
        constexpr ::std::ptrdiff_t _lookingAtCollider = 0x890; // Collider
        constexpr ::std::ptrdiff_t lookingAtPoint = 0x898; // Vector3
        constexpr ::std::ptrdiff_t wakeTime = 0x8A4; // float
        constexpr ::std::ptrdiff_t needsClothesRebuild = 0x8A8; // bool
        constexpr ::std::ptrdiff_t wasSleeping = 0x8A9; // bool
        constexpr ::std::ptrdiff_t wokeUpBefore = 0x8AA; // bool
        constexpr ::std::ptrdiff_t wasDead = 0x8AB; // bool
        constexpr ::std::ptrdiff_t HasMountedClothing = 0x8AC; // bool
        constexpr ::std::ptrdiff_t HasWearableClothing = 0x8AD; // bool
        constexpr ::std::ptrdiff_t lastClothesHash = 0x8B0; // uint
        constexpr ::std::ptrdiff_t lastOpenSoundPlay = 0x8B4; // TimeSince
        constexpr ::std::ptrdiff_t currentViewMode = 0x8B8; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t selectedViewMode = 0x8BC; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t lastRevivePoint = 0x8C0; // Vector3
        constexpr ::std::ptrdiff_t lastReviveDirection = 0x8CC; // Vector3
        constexpr ::std::ptrdiff_t IsWearingDiveGoggles = 0x8D8; // bool
        constexpr ::std::ptrdiff_t GestureViewModel = 0x8E0; // ViewModel
        constexpr ::std::ptrdiff_t currentClientRespawnInformation = 0x8E8; // RespawnInformation
        constexpr ::std::ptrdiff_t respawnOptionsTimestamp = 0x8F0; // float
        constexpr ::std::ptrdiff_t lastParachuteRequest = 0x8F4; // TimeSince
        constexpr ::std::ptrdiff_t timeSinceUpdatedLookingAt = 0x8F8; // RealTimeSince
        constexpr ::std::ptrdiff_t nextTopologyTestTime = 0x8FC; // float
        constexpr ::std::ptrdiff_t usePressTime = 0x900; // float
        constexpr ::std::ptrdiff_t useHeldTime = 0x904; // float
        constexpr ::std::ptrdiff_t lookingAtTest = 0x908; // HitTest
        constexpr ::std::ptrdiff_t cachedWaterDrinkingPoint = 0x910; // Vector3
        constexpr ::std::ptrdiff_t hasRequestedServerEmoji = 0x91C; // bool
        constexpr ::std::ptrdiff_t gestureList = 0x930; // GestureCollection
        constexpr ::std::ptrdiff_t gestureFinishedTime = 0x938; // TimeUntil
        constexpr ::std::ptrdiff_t blockHeldInputTimer = 0x93C; // TimeSince
        constexpr ::std::ptrdiff_t currentGesture = 0x940; // GestureConfig
        constexpr ::std::ptrdiff_t disabledHeldEntity = 0x948; // HeldEntity
        constexpr ::std::ptrdiff_t nextGestureMenuOpenTime = 0x950; // float
        constexpr ::std::ptrdiff_t client_lastHelloTime = 0x954; // float
        constexpr ::std::ptrdiff_t currentTeam = 0x958; // ulong
        constexpr ::std::ptrdiff_t clientTeam = 0x960; // PlayerTeam
        constexpr ::std::ptrdiff_t lastReceivedTeamTime = 0x970; // float
        constexpr ::std::ptrdiff_t lastPresenceTeamId = 0x978; // ulong
        constexpr ::std::ptrdiff_t lastPresenceTeamSize = 0x980; // int
        constexpr ::std::ptrdiff_t playerGroupKey = 0x988; // string
        constexpr ::std::ptrdiff_t playerGroupSizeKey = 0x990; // string
        constexpr ::std::ptrdiff_t clActiveItem = 0x998; // ItemId
        constexpr ::std::ptrdiff_t ClientCurrentMapNotes = 0x9A0; // List<MapNote>
        constexpr ::std::ptrdiff_t ClientCurrentDeathNote = 0x9A8; // MapNote
        constexpr ::std::ptrdiff_t keepOpenMapInterface = 0x9B0; // bool
        constexpr ::std::ptrdiff_t missions = 0x9B8; // List<BaseMission.MissionInstance>
        constexpr ::std::ptrdiff_t _activeMission = 0x9C0; // int
        constexpr ::std::ptrdiff_t modelState = 0x9C8; // ModelState
        constexpr ::std::ptrdiff_t mounted = 0x9D0; // EntityRef
        constexpr ::std::ptrdiff_t nextSeatSwapTime = 0x9E0; // float
        constexpr ::std::ptrdiff_t mountInputHeldDuringDismount = 0x9E4; // bool
        constexpr ::std::ptrdiff_t PetEntity = 0x9E8; // BaseEntity
        constexpr ::std::ptrdiff_t lastPetCommandIssuedTime = 0x9F0; // float
        constexpr ::std::ptrdiff_t PetPrefabID = 0x9F4; // uint
        constexpr ::std::ptrdiff_t PetID = 0x9F8; // NetworkableId
        constexpr ::std::ptrdiff_t ClientCurrentPings = 0xA00; // List<MapNote>
        constexpr ::std::ptrdiff_t tapInProcess = 0xA08; // bool
        constexpr ::std::ptrdiff_t lastPingTap = 0xA0C; // TimeSince
        constexpr ::std::ptrdiff_t cachedBuildingPrivilegeTime = 0xA10; // float
        constexpr ::std::ptrdiff_t cachedBuildingPrivilege = 0xA18; // BuildingPrivlidge
        constexpr ::std::ptrdiff_t cachedVehicleBuildingBlockedTime = 0xA20; // float
        constexpr ::std::ptrdiff_t cachedVehicleBuildingBlocked = 0xA24; // bool
        constexpr ::std::ptrdiff_t cachedEntityBuildingBlockedTime = 0xA28; // float
        constexpr ::std::ptrdiff_t cachedEntityBuildingBlocked = 0xA2C; // bool
        constexpr ::std::ptrdiff_t cachedPrivilegeFromOther = 0xA30; // BaseEntity
        constexpr ::std::ptrdiff_t cachedPrivilegeFromOtherTime = 0xA38; // float
        constexpr ::std::ptrdiff_t maxProjectileID = 0xA3C; // int
        constexpr ::std::ptrdiff_t lastSpectateCameraUpdate = 0xA40; // TimeSince
        constexpr ::std::ptrdiff_t lastUpdateTime = 0xA44; // float
        constexpr ::std::ptrdiff_t cachedThreatLevel = 0xA48; // float
        constexpr ::std::ptrdiff_t lastSentTickTime = 0xA4C; // float
        constexpr ::std::ptrdiff_t lastTickStopwatch = 0xA50; // Stopwatch
        constexpr ::std::ptrdiff_t lastSentTick = 0xA58; // PlayerTick
        constexpr ::std::ptrdiff_t CurrentTutorialAllowance = 0xA60; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t startTutorialCooldown = 0xA64; // float
        constexpr ::std::ptrdiff_t nextVisThink = 0xA68; // float
        constexpr ::std::ptrdiff_t lastTimeSeen = 0xA6C; // float
        constexpr ::std::ptrdiff_t debugPrevVisible = 0xA70; // bool
        constexpr ::std::ptrdiff_t fallDamageEffect = 0xA78; // GameObjectRef
        constexpr ::std::ptrdiff_t drownEffect = 0xA80; // GameObjectRef
        constexpr ::std::ptrdiff_t playerFlags = 0xA88; // BasePlayer.PlayerFlags
        constexpr ::std::ptrdiff_t eyes = 0xA90; // PlayerEyes
        constexpr ::std::ptrdiff_t inventory = 0xA98; // PlayerInventory
        constexpr ::std::ptrdiff_t blueprints = 0xAA0; // PlayerBlueprints
        constexpr ::std::ptrdiff_t metabolism = 0xAA8; // PlayerMetabolism
        constexpr ::std::ptrdiff_t modifiers = 0xAB0; // PlayerModifiers
        constexpr ::std::ptrdiff_t playerCollider = 0xAB8; // CapsuleCollider
        constexpr ::std::ptrdiff_t Belt = 0xAC0; // PlayerBelt
        constexpr ::std::ptrdiff_t playerRigidbody = 0xAC8; // Rigidbody
        constexpr ::std::ptrdiff_t userID = 0xAD0; // ulong
        constexpr ::std::ptrdiff_t UserIDString = 0xAD8; // string
        constexpr ::std::ptrdiff_t gamemodeteam = 0xAE0; // int
        constexpr ::std::ptrdiff_t reputation = 0xAE4; // int
        constexpr ::std::ptrdiff_t _displayName = 0xAE8; // string
        constexpr ::std::ptrdiff_t _lastSetName = 0xAF0; // string
        constexpr ::std::ptrdiff_t playerColliderStanding = 0xAF8; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t playerColliderDucked = 0xB0C; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t playerColliderCrawling = 0xB20; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t playerColliderLyingDown = 0xB34; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t cachedProtection = 0xB48; // ProtectionProperties
        constexpr ::std::ptrdiff_t lastHeadshotSoundTime = 0xB50; // float
        constexpr ::std::ptrdiff_t nextColliderRefreshTime = 0xB54; // float
        constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0xB58; // float
        constexpr ::std::ptrdiff_t clothingBlocksAiming = 0xB5C; // bool
        constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0xB60; // float
        constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0xB64; // float
        constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0xB68; // float
        constexpr ::std::ptrdiff_t equippingBlocked = 0xB6C; // bool
        constexpr ::std::ptrdiff_t eggVision = 0xB70; // float
        constexpr ::std::ptrdiff_t activeTelephone = 0xB78; // PhoneController
        constexpr ::std::ptrdiff_t designingAIEntity = 0xB80; // BaseEntity
    } // namespace BasePlayer
    namespace BaseEntity {
        constexpr ::std::ptrdiff_t ragdoll = 0x80; // Ragdoll
        constexpr ::std::ptrdiff_t positionLerp = 0x88; // PositionLerp
        constexpr ::std::ptrdiff_t ClientNetworkTime = 0x90; // float
        constexpr ::std::ptrdiff_t menuOptions = 0x98; // List<Option>
        constexpr ::std::ptrdiff_t bounds = 0xA0; // Bounds
        constexpr ::std::ptrdiff_t impactEffect = 0xB8; // GameObjectRef
        constexpr ::std::ptrdiff_t enableSaving = 0xC0; // bool
        constexpr ::std::ptrdiff_t syncPosition = 0xC1; // bool
        constexpr ::std::ptrdiff_t model = 0xC8; // Model
        constexpr ::std::ptrdiff_t flags = 0xD0; // BaseEntity.Flags
        constexpr ::std::ptrdiff_t parentBone = 0xD4; // uint
        constexpr ::std::ptrdiff_t skinID = 0xD8; // ulong
        constexpr ::std::ptrdiff_t _components = 0xE0; // EntityComponentBase[]
        constexpr ::std::ptrdiff_t HasBrain = 0xE8; // bool
        constexpr ::std::ptrdiff_t _name = 0xF0; // string
        constexpr ::std::ptrdiff_t OwnerID = 0xF8; // ulong
        constexpr ::std::ptrdiff_t broadcastProtocol = 0x100; // uint
        constexpr ::std::ptrdiff_t links = 0x108; // List<EntityLink>
        constexpr ::std::ptrdiff_t linkedToNeighbours = 0x110; // bool
        constexpr ::std::ptrdiff_t _pendingFileRequests = 0x118; // List<BaseEntity.PendingFileRequest>
        constexpr ::std::ptrdiff_t updateParentingAction = 0x120; // Action
        constexpr ::std::ptrdiff_t addedToParentEntity = 0x128; // BaseEntity
        constexpr ::std::ptrdiff_t itemSkin = 0x130; // ItemSkin
        constexpr ::std::ptrdiff_t successCallback = 0x138; // Action
        constexpr ::std::ptrdiff_t failureCallback = 0x140; // Action
        constexpr ::std::ptrdiff_t entitySlots = 0x148; // EntityRef[]
        constexpr ::std::ptrdiff_t triggers = 0x150; // List<TriggerBase>
        constexpr ::std::ptrdiff_t isVisible = 0x158; // bool
        constexpr ::std::ptrdiff_t isAnimatorVisible = 0x159; // bool
        constexpr ::std::ptrdiff_t isShadowVisible = 0x15A; // bool
        constexpr ::std::ptrdiff_t localOccludee = 0x160; // OccludeeSphere
        constexpr ::std::ptrdiff_t Weight = 0x180; // float
    } // namespace BaseEntity
    namespace BaseCombatEntity {
        constexpr ::std::ptrdiff_t __menuOption_Menu_Pickup = 0x188; // Option
        constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // SkeletonProperties
        constexpr ::std::ptrdiff_t baseProtection = 0x208; // ProtectionProperties
        constexpr ::std::ptrdiff_t startHealth = 0x210; // float
        constexpr ::std::ptrdiff_t pickup = 0x218; // BaseCombatEntity.Pickup
        constexpr ::std::ptrdiff_t repair = 0x240; // BaseCombatEntity.Repair
        constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // bool
        constexpr ::std::ptrdiff_t lifestate = 0x274; // BaseCombatEntity.LifeState
        constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // bool
        constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // bool
        constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // bool
        constexpr ::std::ptrdiff_t _health = 0x27C; // float
        constexpr ::std::ptrdiff_t _maxHealth = 0x280; // float
        constexpr ::std::ptrdiff_t faction = 0x284; // BaseCombatEntity.Faction
        constexpr ::std::ptrdiff_t deathTime = 0x288; // float
        constexpr ::std::ptrdiff_t lastNotifyFrame = 0x28C; // int
    } // namespace BaseCombatEntity
    namespace BuildingPrivlidge {
        constexpr ::std::ptrdiff_t __menuOption_Menu_AssignToFriend = 0x4A0; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_MaxAuth = 0x518; // Option
        constexpr ::std::ptrdiff_t __menuOption_Menu_RotateVM = 0x590; // Option
        constexpr ::std::ptrdiff_t __menuOption_MenuAuthorize = 0x608; // Option
        constexpr ::std::ptrdiff_t __menuOption_MenuClearList = 0x680; // Option
        constexpr ::std::ptrdiff_t __menuOption_MenuDeauthorize = 0x6F8; // Option
        constexpr ::std::ptrdiff_t assignDialog = 0x770; // GameObject
        constexpr ::std::ptrdiff_t allowedConstructionItems = 0x780; // List<ItemDefinition>
        constexpr ::std::ptrdiff_t cachedProtectedMinutes = 0x788; // float
        constexpr ::std::ptrdiff_t cachedUpkeepPeriodMinutes = 0x78C; // float
        constexpr ::std::ptrdiff_t cachedUpkeepCostFraction = 0x790; // float
        constexpr ::std::ptrdiff_t clientAuthed = 0x794; // bool
        constexpr ::std::ptrdiff_t clientAnyAuthed = 0x795; // bool
        constexpr ::std::ptrdiff_t lastProtectedMinuteUpdate = 0x798; // DateTime
    } // namespace BuildingPrivlidge
    namespace BaseProjectile {
        constexpr ::std::ptrdiff_t NoiseRadius = 0x2A0; // float
        constexpr ::std::ptrdiff_t damageScale = 0x2A4; // float
        constexpr ::std::ptrdiff_t distanceScale = 0x2A8; // float
        constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2AC; // float
        constexpr ::std::ptrdiff_t automatic = 0x2B0; // bool
        constexpr ::std::ptrdiff_t usableByTurret = 0x2B1; // bool
        constexpr ::std::ptrdiff_t turretDamageScale = 0x2B4; // float
        constexpr ::std::ptrdiff_t attackFX = 0x2B8; // GameObjectRef
        constexpr ::std::ptrdiff_t silencedAttack = 0x2C0; // GameObjectRef
        constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C8; // GameObjectRef
        constexpr ::std::ptrdiff_t MuzzlePoint = 0x2D0; // Transform
        constexpr ::std::ptrdiff_t reloadTime = 0x2D8; // float
        constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2DC; // bool
        constexpr ::std::ptrdiff_t primaryMagazine = 0x2E0; // BaseProjectile.Magazine
        constexpr ::std::ptrdiff_t fractionalReload = 0x2E8; // bool
        constexpr ::std::ptrdiff_t reloadStartDuration = 0x2EC; // float
        constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2F0; // float
        constexpr ::std::ptrdiff_t reloadEndDuration = 0x2F4; // float
        constexpr ::std::ptrdiff_t aimSway = 0x2F8; // float
        constexpr ::std::ptrdiff_t aimSwaySpeed = 0x2FC; // float
        constexpr ::std::ptrdiff_t recoil = 0x300; // RecoilProperties
        constexpr ::std::ptrdiff_t aimconeCurve = 0x308; // AnimationCurve
        constexpr ::std::ptrdiff_t aimCone = 0x310; // float
        constexpr ::std::ptrdiff_t hipAimCone = 0x314; // float
        constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x318; // float
        constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x31C; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x320; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x324; // float
        constexpr ::std::ptrdiff_t stancePenaltyScale = 0x328; // float
        constexpr ::std::ptrdiff_t hasADS = 0x32C; // bool
        constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x32D; // bool
        constexpr ::std::ptrdiff_t manualCycle = 0x32E; // bool
        constexpr ::std::ptrdiff_t needsCycle = 0x32F; // bool
        constexpr ::std::ptrdiff_t isCycling = 0x330; // bool
        constexpr ::std::ptrdiff_t aiming = 0x331; // bool
        constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x332; // bool
        constexpr ::std::ptrdiff_t isBurstWeapon = 0x333; // bool
        constexpr ::std::ptrdiff_t canChangeFireModes = 0x334; // bool
        constexpr ::std::ptrdiff_t defaultOn = 0x335; // bool
        constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x338; // float
        constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x33C; // float
        constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x340; // float
        constexpr ::std::ptrdiff_t resetDuration = 0x344; // float
        constexpr ::std::ptrdiff_t numShotsFired = 0x348; // int
        constexpr ::std::ptrdiff_t nextReloadTime = 0x34C; // float
        constexpr ::std::ptrdiff_t startReloadTime = 0x350; // float
        constexpr ::std::ptrdiff_t stancePenalty = 0x354; // float
        constexpr ::std::ptrdiff_t aimconePenalty = 0x358; // float
        constexpr ::std::ptrdiff_t cachedModHash = 0x35C; // uint
        constexpr ::std::ptrdiff_t sightAimConeScale = 0x360; // float
        constexpr ::std::ptrdiff_t sightAimConeOffset = 0x364; // float
        constexpr ::std::ptrdiff_t hipAimConeScale = 0x368; // float
        constexpr ::std::ptrdiff_t hipAimConeOffset = 0x36C; // float
        constexpr ::std::ptrdiff_t isReloading = 0x370; // bool
        constexpr ::std::ptrdiff_t timeSinceReloadFinished = 0x374; // TimeSince
        constexpr ::std::ptrdiff_t swaySampleTime = 0x378; // float
        constexpr ::std::ptrdiff_t lastShotTime = 0x37C; // float
        constexpr ::std::ptrdiff_t reloadPressTime = 0x380; // float
        constexpr ::std::ptrdiff_t ammoTypePreReload = 0x388; // ItemDefinition
        constexpr ::std::ptrdiff_t fractionalReloadDesiredCount = 0x390; // int
        constexpr ::std::ptrdiff_t fractionalReloadNumAdded = 0x394; // int
        constexpr ::std::ptrdiff_t currentBurst = 0x398; // int
        constexpr ::std::ptrdiff_t triggerReady = 0x39C; // bool
        constexpr ::std::ptrdiff_t nextHeightCheckTime = 0x3A0; // float
        constexpr ::std::ptrdiff_t cachedUnderground = 0x3A4; // bool
        constexpr ::std::ptrdiff_t createdProjectiles = 0x3A8; // List<Projectile>
    } // namespace BaseProjectile
    namespace Magazine {
        constexpr ::std::ptrdiff_t definition = 0x10; // BaseProjectile.Magazine.Definition
        constexpr ::std::ptrdiff_t capacity = 0x18; // int
        constexpr ::std::ptrdiff_t contents = 0x1C; // int
        constexpr ::std::ptrdiff_t ammoType = 0x20; // ItemDefinition
        constexpr ::std::ptrdiff_t allowPlayerReloading = 0x28; // bool
        constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // bool
    } // namespace Magazine
    namespace PlayerInventory {
        constexpr ::std::ptrdiff_t containerMain = 0x28; // ItemContainer
        constexpr ::std::ptrdiff_t containerBelt = 0x30; // ItemContainer
        constexpr ::std::ptrdiff_t containerWear = 0x38; // ItemContainer
        constexpr ::std::ptrdiff_t crafting = 0x40; // ItemCrafter
        constexpr ::std::ptrdiff_t loot = 0x48; // PlayerLoot
        constexpr ::std::ptrdiff_t lastSet = 0x50; // List<ItemIcon>
        constexpr ::std::ptrdiff_t cachedResult = 0x58; // PlayerInventory.WearCheckResult
        constexpr ::std::ptrdiff_t returnItems = 0x68; // List<Item>
    } // namespace PlayerInventory
    namespace ItemContainer {
        constexpr ::std::ptrdiff_t flags = 0x10; // ItemContainer.Flag
        constexpr ::std::ptrdiff_t allowedContents = 0x14; // ItemContainer.ContentsType
        constexpr ::std::ptrdiff_t onlyAllowedItems = 0x18; // ItemDefinition[]
        constexpr ::std::ptrdiff_t availableSlots = 0x28; // List<ItemSlot>
        constexpr ::std::ptrdiff_t capacity = 0x30; // int
        constexpr ::std::ptrdiff_t uid = 0x38; // ItemContainerId
        constexpr ::std::ptrdiff_t dirty = 0x40; // bool
        constexpr ::std::ptrdiff_t itemList = 0x48; // List<Item>
        constexpr ::std::ptrdiff_t temperature = 0x50; // float
        constexpr ::std::ptrdiff_t parent = 0x58; // Item
        constexpr ::std::ptrdiff_t playerOwner = 0x60; // BasePlayer
        constexpr ::std::ptrdiff_t entityOwner = 0x68; // BaseEntity
        constexpr ::std::ptrdiff_t isServer = 0x70; // bool
        constexpr ::std::ptrdiff_t maxStackSize = 0x74; // int
        constexpr ::std::ptrdiff_t containerVolume = 0x78; // int
    } // namespace ItemContainer
    namespace PlayerModel {
        constexpr ::std::ptrdiff_t collision = 0x20; // BoxCollider
        constexpr ::std::ptrdiff_t censorshipCube = 0x28; // GameObject
        constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // GameObject
        constexpr ::std::ptrdiff_t jawBone = 0x38; // GameObject
        constexpr ::std::ptrdiff_t neckBone = 0x40; // GameObject
        constexpr ::std::ptrdiff_t headBone = 0x48; // GameObject
        constexpr ::std::ptrdiff_t eyeController = 0x50; // EyeController
        constexpr ::std::ptrdiff_t blinkController = 0x58; // EyeBlink
        constexpr ::std::ptrdiff_t SpineBones = 0x60; // Transform[]
        constexpr ::std::ptrdiff_t leftFootBone = 0x68; // Transform
        constexpr ::std::ptrdiff_t rightFootBone = 0x70; // Transform
        constexpr ::std::ptrdiff_t leftHandPropBone = 0x78; // Transform
        constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // Transform
        constexpr ::std::ptrdiff_t rightHandTarget = 0x88; // Vector3
        constexpr ::std::ptrdiff_t isPreview = 0x94; // bool
        constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // Vector3
        constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // Quaternion
        constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // Vector3
        constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // Quaternion
        constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // float
        constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // Vector3
        constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // Quaternion
        constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // Vector3
        constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // Quaternion
        constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // Avatar
        constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // Avatar
        constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t SleepGesture = 0x130; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGestureHandcuff = 0x140; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x148; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CurrentGesture = 0x150; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t MaleSkin = 0x158; // SkinSetCollection
        constexpr ::std::ptrdiff_t FemaleSkin = 0x160; // SkinSetCollection
        constexpr ::std::ptrdiff_t subsurfaceProfile = 0x168; // SubsurfaceProfile
        constexpr ::std::ptrdiff_t voiceVolume = 0x170; // float
        constexpr ::std::ptrdiff_t skinColor = 0x174; // float
        constexpr ::std::ptrdiff_t skinNumber = 0x178; // float
        constexpr ::std::ptrdiff_t meshNumber = 0x17C; // float
        constexpr ::std::ptrdiff_t hairNumber = 0x180; // float
        constexpr ::std::ptrdiff_t skinType = 0x184; // int
        constexpr ::std::ptrdiff_t movementSounds = 0x188; // MovementSounds
        constexpr ::std::ptrdiff_t showSash = 0x190; // bool
        constexpr ::std::ptrdiff_t tempPoseType = 0x194; // int
        constexpr ::std::ptrdiff_t underwearSkin = 0x198; // uint
        constexpr ::std::ptrdiff_t overrideSkinSeed = 0x1A0; // ulong
        constexpr ::std::ptrdiff_t AimAngles = 0x1A8; // Quaternion
        constexpr ::std::ptrdiff_t LookAngles = 0x1B8; // Quaternion
        constexpr ::std::ptrdiff_t modelState = 0x1C8; // ModelState
        constexpr ::std::ptrdiff_t position = 0x1D0; // Vector3
        constexpr ::std::ptrdiff_t velocity = 0x1DC; // Vector3
        constexpr ::std::ptrdiff_t speedOverride = 0x1E8; // Vector3
        constexpr ::std::ptrdiff_t newVelocity = 0x1F4; // Vector3
        constexpr ::std::ptrdiff_t rotation = 0x200; // Quaternion
        constexpr ::std::ptrdiff_t mountedRotation = 0x210; // Quaternion
        constexpr ::std::ptrdiff_t fallingTime = 0x220; // float
        constexpr ::std::ptrdiff_t smoothLeftFootIK = 0x224; // Vector3
        constexpr ::std::ptrdiff_t smoothRightFootIK = 0x230; // Vector3
        constexpr ::std::ptrdiff_t drawShadowOnly = 0x23C; // bool
        constexpr ::std::ptrdiff_t isIncapacitated = 0x23D; // bool
        constexpr ::std::ptrdiff_t flinchLocation = 0x240; // uint
        constexpr ::std::ptrdiff_t visible = 0x244; // bool
        constexpr ::std::ptrdiff_t nameTag = 0x248; // PlayerNameTag
        constexpr ::std::ptrdiff_t animatorNeedsWarmup = 0x250; // bool
        constexpr ::std::ptrdiff_t isLocalPlayer = 0x251; // bool
        constexpr ::std::ptrdiff_t aimSoundDef = 0x258; // SoundDefinition
        constexpr ::std::ptrdiff_t aimEndSoundDef = 0x260; // SoundDefinition
        constexpr ::std::ptrdiff_t InGesture = 0x268; // bool
        constexpr ::std::ptrdiff_t CurrentGestureConfig = 0x270; // GestureConfig
        constexpr ::std::ptrdiff_t InCinematic = 0x278; // bool
        constexpr ::std::ptrdiff_t defaultAnimatorController = 0x280; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _multiMesh = 0x288; // SkinnedMultiMesh
        constexpr ::std::ptrdiff_t _animator = 0x290; // Animator
        constexpr ::std::ptrdiff_t _lodGroup = 0x298; // LODGroup
        constexpr ::std::ptrdiff_t _currentGesture = 0x2A0; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t holdTypeLock = 0x2A8; // float
        constexpr ::std::ptrdiff_t hasHeldEntity = 0x2AC; // bool
        constexpr ::std::ptrdiff_t wasMountedRightAim = 0x2AD; // bool
        constexpr ::std::ptrdiff_t cachedMask = 0x2B0; // int
        constexpr ::std::ptrdiff_t cachedConstructionMask = 0x2B4; // int
        constexpr ::std::ptrdiff_t WorkshopHeldEntity = 0x2B8; // HeldEntity
        constexpr ::std::ptrdiff_t wasCrawling = 0x2C0; // bool
        constexpr ::std::ptrdiff_t mountedSpineLookWeight = 0x2C4; // float
        constexpr ::std::ptrdiff_t mountedAnimSpeed = 0x2C8; // float
        constexpr ::std::ptrdiff_t preserveBones = 0x2CC; // bool
        constexpr ::std::ptrdiff_t blendShapeControllers = 0x2D8; // List<BlendShapeController>
        constexpr ::std::ptrdiff_t suppressEyeMovement = 0x2E0; // bool
        constexpr ::std::ptrdiff_t isRestrained = 0x2E1; // bool
        constexpr ::std::ptrdiff_t IsNpc = 0x2E2; // bool
        constexpr ::std::ptrdiff_t timeSinceReactionStart = 0x2E4; // TimeSince
        constexpr ::std::ptrdiff_t timeSinceLeftFootTest = 0x2E8; // TimeSince
        constexpr ::std::ptrdiff_t cachedLeftFootPos = 0x2EC; // Vector3
        constexpr ::std::ptrdiff_t cachedLeftFootNormal = 0x2F8; // Vector3
        constexpr ::std::ptrdiff_t timeSinceRightFootTest = 0x304; // TimeSince
        constexpr ::std::ptrdiff_t cachedRightFootPos = 0x308; // Vector3
        constexpr ::std::ptrdiff_t cachedRightFootNormal = 0x314; // Vector3
        constexpr ::std::ptrdiff_t _smoothAimWeight = 0x320; // float
        constexpr ::std::ptrdiff_t _smoothVelocity = 0x324; // float
        constexpr ::std::ptrdiff_t _smoothlookAngle = 0x328; // Vector3
        constexpr ::std::ptrdiff_t allowMountedHeadLook = 0x334; // bool
        constexpr ::std::ptrdiff_t overrideLeftHandIkWeight = 0x338; // float
        constexpr ::std::ptrdiff_t overrideRightHandIkWeight = 0x33C; // float
        constexpr ::std::ptrdiff_t smoothLookDir = 0x340; // Vector3
        constexpr ::std::ptrdiff_t lastSafeLookDir = 0x34C; // Vector3
        constexpr ::std::ptrdiff_t cinematicLookAt = 0x358; // Vector3
        constexpr ::std::ptrdiff_t lastCinematicLookAt = 0x364; // Vector3
        constexpr ::std::ptrdiff_t cinematicLookAtWeight = 0x370; // float
        constexpr ::std::ptrdiff_t cinematicTargetWeight = 0x374; // float
        constexpr ::std::ptrdiff_t Shoulders = 0x378; // Transform[]
        constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x380; // Transform[]
        constexpr ::std::ptrdiff_t LegParts = 0x388; // List<SkinnedMeshRenderer>
        constexpr ::std::ptrdiff_t fadeToggles = 0x390; // List<WearableFadeToggle>
        constexpr ::std::ptrdiff_t fakeSpineBones = 0x398; // Transform[]
        constexpr ::std::ptrdiff_t extraLeanBack = 0x3A0; // float
        constexpr ::std::ptrdiff_t timeInArmsMode = 0x3A8; // float
    } // namespace PlayerModel
    namespace ModelState {
        constexpr ::std::ptrdiff_t waterLevel = 0x10; // float
        constexpr ::std::ptrdiff_t lookDir = 0x14; // Vector3
        constexpr ::std::ptrdiff_t flags = 0x20; // int
        constexpr ::std::ptrdiff_t poseType = 0x24; // int
        constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // Vector3
        constexpr ::std::ptrdiff_t ladderType = 0x34; // int
        constexpr ::std::ptrdiff_t guidePosition = 0x38; // Vector3
        constexpr ::std::ptrdiff_t guideRotation = 0x44; // Vector3
        constexpr ::std::ptrdiff_t guidePrefab = 0x50; // uint
        constexpr ::std::ptrdiff_t guideValid = 0x54; // bool
        constexpr ::std::ptrdiff_t guideVersion = 0x58; // int
        constexpr ::std::ptrdiff_t ShouldPool = 0x5C; // bool
        constexpr ::std::ptrdiff_t _disposed = 0x5D; // bool
    } // namespace ModelState
    namespace Item {
        constexpr ::std::ptrdiff_t _condition = 0x10; // float
        constexpr ::std::ptrdiff_t _maxCondition = 0x14; // float
        constexpr ::std::ptrdiff_t info = 0x18; // ItemDefinition
        constexpr ::std::ptrdiff_t uid = 0x20; // ItemId
        constexpr ::std::ptrdiff_t dirty = 0x28; // bool
        constexpr ::std::ptrdiff_t amount = 0x2C; // int
        constexpr ::std::ptrdiff_t position = 0x30; // int
        constexpr ::std::ptrdiff_t busyTime = 0x34; // float
        constexpr ::std::ptrdiff_t removeTime = 0x38; // float
        constexpr ::std::ptrdiff_t fuel = 0x3C; // float
        constexpr ::std::ptrdiff_t isServer = 0x40; // bool
        constexpr ::std::ptrdiff_t instanceData = 0x48; // Item.InstanceData
        constexpr ::std::ptrdiff_t skin = 0x50; // ulong
        constexpr ::std::ptrdiff_t name = 0x58; // string
        constexpr ::std::ptrdiff_t streamerName = 0x60; // string
        constexpr ::std::ptrdiff_t text = 0x68; // string
        constexpr ::std::ptrdiff_t ammoCount = 0x70; // Nullable<int>
        constexpr ::std::ptrdiff_t cookTimeLeft = 0x78; // float
        constexpr ::std::ptrdiff_t progressBar = 0x7C; // float
        constexpr ::std::ptrdiff_t flags = 0x88; // Item.Flag
        constexpr ::std::ptrdiff_t contents = 0x90; // ItemContainer
        constexpr ::std::ptrdiff_t parent = 0x98; // ItemContainer
        constexpr ::std::ptrdiff_t worldEnt = 0xA0; // EntityRef
        constexpr ::std::ptrdiff_t heldEntity = 0xB0; // EntityRef
    } // namespace Item
    namespace Model {
        constexpr ::std::ptrdiff_t collision = 0x20; // SphereCollider
        constexpr ::std::ptrdiff_t rootBone = 0x28; // Transform
        constexpr ::std::ptrdiff_t headBone = 0x30; // Transform
        constexpr ::std::ptrdiff_t eyeBone = 0x38; // Transform
        constexpr ::std::ptrdiff_t animator = 0x40; // Animator
        constexpr ::std::ptrdiff_t skeleton = 0x48; // Skeleton
        constexpr ::std::ptrdiff_t boneTransforms = 0x50; // Transform[]
        constexpr ::std::ptrdiff_t boneNames = 0x58; // string[]
        constexpr ::std::ptrdiff_t boneDict = 0x60; // BoneDictionary
        constexpr ::std::ptrdiff_t skin = 0x68; // int
        constexpr ::std::ptrdiff_t _lodGroup = 0x70; // LODGroup
    } // namespace Model
    namespace RecoilProperties {
        constexpr ::std::ptrdiff_t recoilYawMin = 0x18; // float
        constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // float
        constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // float
        constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // float
        constexpr ::std::ptrdiff_t timeToTakeMin = 0x28; // float
        constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // float
        constexpr ::std::ptrdiff_t ADSScale = 0x30; // float
        constexpr ::std::ptrdiff_t movementPenalty = 0x34; // float
        constexpr ::std::ptrdiff_t clampPitch = 0x38; // float
        constexpr ::std::ptrdiff_t pitchCurve = 0x40; // AnimationCurve
        constexpr ::std::ptrdiff_t yawCurve = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t useCurves = 0x50; // bool
        constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // bool
        constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // int
        constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // float
        constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // bool
        constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // float
        constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // AnimationCurve
        constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // AnimationCurve
        constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // float
        constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // float
        constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // RecoilProperties
    } // namespace RecoilProperties
    namespace BaseFishingRod {
        constexpr ::std::ptrdiff_t FishingBobberRef = 0x218; // GameObjectRef
        constexpr ::std::ptrdiff_t FishCatchDistance = 0x220; // float
        constexpr ::std::ptrdiff_t ReelLineRenderer = 0x228; // LineRenderer
        constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x230; // Transform
        constexpr ::std::ptrdiff_t CurrentState = 0x238; // BaseFishingRod.CatchState
        constexpr ::std::ptrdiff_t currentFishState = 0x23C; // BaseFishingRod.FishState
        constexpr ::std::ptrdiff_t currentBobber = 0x240; // EntityRef<FishingBobber>
        constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x250; // float
        constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x254; // float
        constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x258; // float
        constexpr ::std::ptrdiff_t MaxCastDistance = 0x25C; // float
        constexpr ::std::ptrdiff_t ForceFish = 0x260; // ItemModFishable
        constexpr ::std::ptrdiff_t BobberPreview = 0x268; // GameObjectRef
        constexpr ::std::ptrdiff_t onLineSoundDef = 0x270; // SoundDefinition
        constexpr ::std::ptrdiff_t strainSoundDef = 0x278; // SoundDefinition
        constexpr ::std::ptrdiff_t strainGainCurve = 0x280; // AnimationCurve
        constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x288; // SoundDefinition
        constexpr ::std::ptrdiff_t lineRendererPositionsArray = 0x290; // Vector3[]
        constexpr ::std::ptrdiff_t lineRendererResultArray = 0x298; // Vector3[]
        constexpr ::std::ptrdiff_t lineRendererSlack = 0x2A0; // float[]
        constexpr ::std::ptrdiff_t clientStrainAmountNormalised = 0x2A8; // float
        constexpr ::std::ptrdiff_t canCancel = 0x2AC; // TimeUntil
        constexpr ::std::ptrdiff_t rodViewModel = 0x2B0; // FishingRodViewmodel
        constexpr ::std::ptrdiff_t spawnedPreview = 0x2B8; // BobberPreview
        constexpr ::std::ptrdiff_t aimAnimationReady = 0x2C0; // bool
        constexpr ::std::ptrdiff_t onLineSound = 0x2C8; // Sound
        constexpr ::std::ptrdiff_t strainSound = 0x2D0; // Sound
        constexpr ::std::ptrdiff_t strainGainMod = 0x2D8; // SoundModulation.Modulator
        constexpr ::std::ptrdiff_t consumingBackMovement = 0x2E0; // TimeUntil
        constexpr ::std::ptrdiff_t reelInAnimTimer = 0x2E4; // TimeSince
    } // namespace BaseFishingRod
    namespace FishingBobber {
        constexpr ::std::ptrdiff_t centerOfMass = 0x290; // Transform
        constexpr ::std::ptrdiff_t myRigidBody = 0x298; // Rigidbody
        constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // Transform
        constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // Transform
        constexpr ::std::ptrdiff_t HorizontalMoveSpeed = 0x2B0; // float
        constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // float
        constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // float
        constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // float
        constexpr ::std::ptrdiff_t fishLerp = 0x2C0; // float
        constexpr ::std::ptrdiff_t lastPosition = 0x2C4; // Vector3
    } // namespace FishingBobber
    namespace OcclusionCulling {
        constexpr ::std::ptrdiff_t computeShader = 0x20; // ComputeShader
        constexpr ::std::ptrdiff_t usePixelShaderFallback = 0x28; // bool
        constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // bool
        constexpr ::std::ptrdiff_t camera = 0x30; // Camera
        constexpr ::std::ptrdiff_t static_staticSet = 0x58; // OcclusionCulling.BufferSet
        constexpr ::std::ptrdiff_t static_dynamicSet = 0x60; // OcclusionCulling.BufferSet
        constexpr ::std::ptrdiff_t static_gridSet = 0x68; // OcclusionCulling.BufferSet
        constexpr ::std::ptrdiff_t frustumPlanes = 0x38; // Vector4[]
        constexpr ::std::ptrdiff_t frustumPropNames = 0x40; // string[]
        constexpr ::std::ptrdiff_t matrixToFloatTemp = 0x48; // float[]
        constexpr ::std::ptrdiff_t fallbackMat = 0x50; // Material
        constexpr ::std::ptrdiff_t depthCopyMat = 0x58; // Material
        constexpr ::std::ptrdiff_t viewMatrix = 0x60; // Matrix4x4
        constexpr ::std::ptrdiff_t projMatrix = 0xA0; // Matrix4x4
        constexpr ::std::ptrdiff_t viewProjMatrix = 0xE0; // Matrix4x4
        constexpr ::std::ptrdiff_t prevViewProjMatrix = 0x120; // Matrix4x4
        constexpr ::std::ptrdiff_t invViewProjMatrix = 0x160; // Matrix4x4
        constexpr ::std::ptrdiff_t useNativePath = 0x1A0; // bool
        constexpr ::std::ptrdiff_t static_instance = 0x70; // OcclusionCulling
        constexpr ::std::ptrdiff_t static_Passthrough = 0x78; // bool
        constexpr ::std::ptrdiff_t static__enabled = 0x88; // bool
        constexpr ::std::ptrdiff_t static__safeMode = 0x89; // bool
        constexpr ::std::ptrdiff_t static__debugShow = 0x8C; // OcclusionCulling.DebugFilter
        constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // OcclusionCulling.DebugSettings
        constexpr ::std::ptrdiff_t debugMipMat = 0x1B0; // Material
        constexpr ::std::ptrdiff_t downscaleMat = 0x1B8; // Material
        constexpr ::std::ptrdiff_t blitCopyMat = 0x1C0; // Material
        constexpr ::std::ptrdiff_t hiZLevelCount = 0x1C8; // int
        constexpr ::std::ptrdiff_t hiZWidth = 0x1CC; // int
        constexpr ::std::ptrdiff_t hiZHeight = 0x1D0; // int
        constexpr ::std::ptrdiff_t depthTexture = 0x1D8; // RenderTexture
        constexpr ::std::ptrdiff_t hiZTexture = 0x1E0; // RenderTexture
        constexpr ::std::ptrdiff_t hiZLevels = 0x1E8; // RenderTexture[]
    } // namespace OcclusionCulling
    namespace OcclusionCulling.DebugSettings {
        constexpr ::std::ptrdiff_t log = 0x10; // bool
        constexpr ::std::ptrdiff_t showAllVisible = 0x11; // bool
        constexpr ::std::ptrdiff_t showMipChain = 0x12; // bool
        constexpr ::std::ptrdiff_t showMain = 0x13; // bool
        constexpr ::std::ptrdiff_t showMainLod = 0x14; // int
        constexpr ::std::ptrdiff_t showFallback = 0x18; // bool
        constexpr ::std::ptrdiff_t showStats = 0x19; // bool
        constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // bool
        constexpr ::std::ptrdiff_t showMask = 0x1C; // OcclusionCulling.DebugMask
        constexpr ::std::ptrdiff_t layerFilter = 0x20; // LayerMask
    } // namespace OcclusionCulling.DebugSettings
    namespace PlayerInput {
        constexpr ::std::ptrdiff_t state = 0x28; // InputState
        constexpr ::std::ptrdiff_t hadInputBuffer = 0x30; // bool
        constexpr ::std::ptrdiff_t bodyRotation = 0x34; // Quaternion
        constexpr ::std::ptrdiff_t bodyAngles = 0x44; // Vector3
        constexpr ::std::ptrdiff_t bodyAnglesOverride = 0x50; // Vector3
        constexpr ::std::ptrdiff_t clearBodyAnglesOverrideOnLerpComplete = 0x5C; // bool
        constexpr ::std::ptrdiff_t bodyAnglesOverrideLerpSpeed = 0x60; // float
        constexpr ::std::ptrdiff_t headRotation = 0x64; // Quaternion
        constexpr ::std::ptrdiff_t headAngles = 0x74; // Vector3
        constexpr ::std::ptrdiff_t recoilAngles = 0x80; // Vector3
        constexpr ::std::ptrdiff_t viewDelta = 0x8C; // Vector2
        constexpr ::std::ptrdiff_t headLerp = 0x94; // float
        constexpr ::std::ptrdiff_t mouseWheelUp = 0x98; // int
        constexpr ::std::ptrdiff_t mouseWheelDn = 0x9C; // int
        constexpr ::std::ptrdiff_t autorun = 0xA0; // bool
        constexpr ::std::ptrdiff_t toggleDuck = 0xA1; // bool
        constexpr ::std::ptrdiff_t toggleAds = 0xA2; // bool
        constexpr ::std::ptrdiff_t lastAdsEntity = 0xA8; // NetworkableId
        constexpr ::std::ptrdiff_t pendingMouseDelta = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t offsetAngles = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t ignoredButtons = 0xC8; // int
        constexpr ::std::ptrdiff_t hasKeyFocus = 0xCC; // bool
    } // namespace PlayerInput
    namespace ItemDefinition {
        constexpr ::std::ptrdiff_t itemid = 0x20; // int
        constexpr ::std::ptrdiff_t shortname = 0x28; // string
        constexpr ::std::ptrdiff_t displayName = 0x30; // Translate.Phrase
        constexpr ::std::ptrdiff_t displayDescription = 0x38; // Translate.Phrase
        constexpr ::std::ptrdiff_t iconSprite = 0x40; // Sprite
        constexpr ::std::ptrdiff_t category = 0x48; // ItemCategory
        constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // ItemSelectionPanel
        constexpr ::std::ptrdiff_t maxDraggable = 0x50; // int
        constexpr ::std::ptrdiff_t itemType = 0x54; // ItemContainer.ContentsType
        constexpr ::std::ptrdiff_t amountType = 0x58; // ItemDefinition.AmountType
        constexpr ::std::ptrdiff_t occupySlots = 0x5C; // ItemSlot
        constexpr ::std::ptrdiff_t stackable = 0x60; // int
        constexpr ::std::ptrdiff_t volume = 0x64; // int
        constexpr ::std::ptrdiff_t quickDespawn = 0x68; // bool
        constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // bool
        constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t rarity = 0x70; // Rarity
        constexpr ::std::ptrdiff_t despawnRarity = 0x74; // Rarity
        constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // bool
        constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // SoundDefinition
        constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // SoundDefinition
        constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t condition = 0x98; // ItemDefinition.Condition
        constexpr ::std::ptrdiff_t hidden = 0xB0; // bool
        constexpr ::std::ptrdiff_t flags = 0xB4; // ItemDefinition.Flag
        constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // bool
        constexpr ::std::ptrdiff_t steamItem = 0xC0; // SteamInventoryItem
        constexpr ::std::ptrdiff_t steamDlc = 0xC8; // SteamDLCItem
        constexpr ::std::ptrdiff_t Parent = 0xD0; // ItemDefinition
        constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // GameObjectRef
        constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // bool
        constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // bool
        constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // Vector3
        constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // ItemDefinition
        constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour
        constexpr ::std::ptrdiff_t itemMods = 0x108; // ItemMod[]
        constexpr ::std::ptrdiff_t Traits = 0x110; // BaseEntity.TraitFlag
        constexpr ::std::ptrdiff_t _skins2 = 0x120; // IPlayerItemDefinition[]
        constexpr ::std::ptrdiff_t panel = 0x128; // GameObject
        constexpr ::std::ptrdiff_t ItemModWearable = 0x130; // ItemModWearable
        constexpr ::std::ptrdiff_t ItemModBurnable = 0x138; // ItemModBurnable
        constexpr ::std::ptrdiff_t ItemModCookable = 0x140; // ItemModCookable
        constexpr ::std::ptrdiff_t isHoldable = 0x148; // bool
        constexpr ::std::ptrdiff_t isUsable = 0x149; // bool
        constexpr ::std::ptrdiff_t CraftableWithSkin = 0x14A; // bool
        constexpr ::std::ptrdiff_t Children = 0x150; // ItemDefinition[]
    } // namespace ItemDefinition
    namespace PlayerEyes {
        constexpr ::std::ptrdiff_t thirdPersonSleepingOffset = 0x28; // Vector3
        constexpr ::std::ptrdiff_t defaultLazyAim = 0x38; // LazyAimProperties
        constexpr ::std::ptrdiff_t viewOffset = 0x40; // Vector3
        constexpr ::std::ptrdiff_t bodyRotation = 0x4C; // Quaternion
        constexpr ::std::ptrdiff_t headAngles = 0x5C; // Vector3
        constexpr ::std::ptrdiff_t rotationLook = 0x68; // Quaternion
        constexpr ::std::ptrdiff_t postRotationLook = 0x78; // Quaternion
        constexpr ::std::ptrdiff_t postRotationLookAlpha = 0x88; // float
        constexpr ::std::ptrdiff_t IsAltLookingLegsThreshold = 0x8C; // bool
    } // namespace PlayerEyes
    namespace Projectile {
        constexpr ::std::ptrdiff_t initialVelocity = 0x20; // Vector3
        constexpr ::std::ptrdiff_t drag = 0x2C; // float
        constexpr ::std::ptrdiff_t gravityModifier = 0x30; // float
        constexpr ::std::ptrdiff_t thickness = 0x34; // float
        constexpr ::std::ptrdiff_t initialDistance = 0x38; // float
        constexpr ::std::ptrdiff_t remainInWorld = 0x3C; // bool
        constexpr ::std::ptrdiff_t stickProbability = 0x40; // float
        constexpr ::std::ptrdiff_t breakProbability = 0x44; // float
        constexpr ::std::ptrdiff_t conditionLoss = 0x48; // float
        constexpr ::std::ptrdiff_t ricochetChance = 0x4C; // float
        constexpr ::std::ptrdiff_t penetrationPower = 0x50; // float
        constexpr ::std::ptrdiff_t waterIntegrityLoss = 0x54; // float
        constexpr ::std::ptrdiff_t damageProperties = 0x58; // DamageProperties
        constexpr ::std::ptrdiff_t damageDistances = 0x60; // MinMax
        constexpr ::std::ptrdiff_t damageMultipliers = 0x68; // MinMax
        constexpr ::std::ptrdiff_t damageTypes = 0x70; // List<DamageTypeEntry>
        constexpr ::std::ptrdiff_t rendererToScale = 0x78; // ScaleRenderer
        constexpr ::std::ptrdiff_t firstPersonRenderer = 0x80; // ScaleRenderer
        constexpr ::std::ptrdiff_t createDecals = 0x88; // bool
        constexpr ::std::ptrdiff_t doDefaultHitEffects = 0x89; // bool
        constexpr ::std::ptrdiff_t flybySound = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t flybySoundDistance = 0x98; // float
        constexpr ::std::ptrdiff_t closeFlybySound = 0xA0; // SoundDefinition
        constexpr ::std::ptrdiff_t closeFlybyDistance = 0xA8; // float
        constexpr ::std::ptrdiff_t tumbleSpeed = 0xAC; // float
        constexpr ::std::ptrdiff_t tumbleAxis = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t swimScale = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t swimSpeed = 0xC8; // Vector3
        constexpr ::std::ptrdiff_t owner = 0xD8; // BasePlayer
        constexpr ::std::ptrdiff_t sourceWeaponPrefab = 0xE0; // AttackEntity
        constexpr ::std::ptrdiff_t sourceProjectilePrefab = 0xE8; // Projectile
        constexpr ::std::ptrdiff_t mod = 0xF0; // ItemModProjectile
        constexpr ::std::ptrdiff_t projectileID = 0xF8; // int
        constexpr ::std::ptrdiff_t seed = 0xFC; // int
        constexpr ::std::ptrdiff_t clientsideEffect = 0x100; // bool
        constexpr ::std::ptrdiff_t clientsideAttack = 0x101; // bool
        constexpr ::std::ptrdiff_t integrity = 0x104; // float
        constexpr ::std::ptrdiff_t maxDistance = 0x108; // float
        constexpr ::std::ptrdiff_t modifier = 0x10C; // Projectile.Modifier
        constexpr ::std::ptrdiff_t invisible = 0x11C; // bool
        constexpr ::std::ptrdiff_t noheadshots = 0x11D; // bool
        constexpr ::std::ptrdiff_t currentThickness = 0x120; // float
        constexpr ::std::ptrdiff_t currentVelocity = 0x124; // Vector3
        constexpr ::std::ptrdiff_t currentPosition = 0x130; // Vector3
        constexpr ::std::ptrdiff_t traveledDistance = 0x13C; // float
        constexpr ::std::ptrdiff_t traveledTime = 0x140; // float
        constexpr ::std::ptrdiff_t launchTime = 0x144; // float
        constexpr ::std::ptrdiff_t sentPosition = 0x148; // Vector3
        constexpr ::std::ptrdiff_t previousPosition = 0x154; // Vector3
        constexpr ::std::ptrdiff_t previousVelocity = 0x160; // Vector3
        constexpr ::std::ptrdiff_t previousTraveledTime = 0x16C; // float
        constexpr ::std::ptrdiff_t isUnderwater = 0x170; // bool
        constexpr ::std::ptrdiff_t isRicochet = 0x171; // bool
        constexpr ::std::ptrdiff_t isRetiring = 0x172; // bool
        constexpr ::std::ptrdiff_t flybyPlayed = 0x173; // bool
        constexpr ::std::ptrdiff_t wasFacingPlayer = 0x174; // bool
        constexpr ::std::ptrdiff_t flybyPlane = 0x178; // Plane
        constexpr ::std::ptrdiff_t flybyRay = 0x188; // Ray
        constexpr ::std::ptrdiff_t cleanupAction = 0x1A0; // Action
        constexpr ::std::ptrdiff_t hitTest = 0x1A8; // HitTest
        constexpr ::std::ptrdiff_t swimRandom = 0x1B0; // float
    } // namespace Projectile
    namespace ItemModProjectile {
        constexpr ::std::ptrdiff_t projectileObject = 0x20; // GameObjectRef
        constexpr ::std::ptrdiff_t mods = 0x28; // ItemModProjectileMod[]
        constexpr ::std::ptrdiff_t ammoType = 0x30; // AmmoTypes
        constexpr ::std::ptrdiff_t numProjectiles = 0x34; // int
        constexpr ::std::ptrdiff_t projectileSpread = 0x38; // float
        constexpr ::std::ptrdiff_t projectileVelocity = 0x3C; // float
        constexpr ::std::ptrdiff_t projectileVelocitySpread = 0x40; // float
        constexpr ::std::ptrdiff_t useCurve = 0x44; // bool
        constexpr ::std::ptrdiff_t spreadScalar = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t attackEffectOverride = 0x50; // GameObjectRef
        constexpr ::std::ptrdiff_t barrelConditionLoss = 0x58; // float
        constexpr ::std::ptrdiff_t category = 0x60; // string
    } // namespace ItemModProjectile
} // namespace blazedumper
